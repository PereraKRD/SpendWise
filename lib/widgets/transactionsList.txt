import 'package:flutter/material.dart';
import 'package:font_awesome_flutter/font_awesome_flutter.dart';
import 'package:intl/intl.dart';
import 'package:spendwise/utils/icons_list.dart';

class TransactionList extends StatelessWidget {
  TransactionList({
    Key? key,
    required this.data,
  }) : super(key: key);

  final dynamic data;

  @override
  Widget build(BuildContext context) {
    DateTime date = DateTime.fromMillisecondsSinceEpoch(data['createdAt']);
    String formattedDate = DateFormat('d MMM hh:mm a').format(date);

    return Dismissible(
      key: UniqueKey(), // Provide a unique key for each Dismissible widget
      background: Container(
        color: Colors.blue, // Background color when swiping to delete
        alignment: Alignment.centerRight,
        padding: EdgeInsets.symmetric(horizontal: 20),
        child: Icon(
          Icons.edit,
          color: Colors.white,
        ),
      ),
      secondaryBackground: Container(
        color: Colors.red, // Background color when swiping to edit
        alignment: Alignment.centerLeft,
        padding: EdgeInsets.symmetric(horizontal: 20),
        child: Icon(
          Icons.delete,
          color: Colors.white,
        ),
      ),
      confirmDismiss: (direction) async {
        bool confirm = await showDialog(
          context: context,
          builder: (BuildContext context) {
            if (direction == DismissDirection.endToStart) {
              return AlertDialog(
                title: Text("Confirm"),
                content:
                    Text("Are you sure you want to delete this transaction?"),
                actions: <Widget>[
                  TextButton(
                    onPressed: () => Navigator.of(context).pop(true),
                    child: Text("Delete"),
                  ),
                  TextButton(
                    onPressed: () => Navigator.of(context).pop(false),
                    child: Text("Cancel"),
                  ),
                ],
              );
            } else {
              return AlertDialog(
                title: Text("Confirm"),
                content:
                    Text("Are you sure you want to edit this transaction?"),
                actions: <Widget>[
                  TextButton(
                    onPressed: () {},
                    child: Text("edit"),
                  ),
                  TextButton(
                    onPressed: () => Navigator.of(context).pop(false),
                    child: Text("Cancel"),
                  ),
                ],
              );
            }
          },
        );
        return confirm ??
            false; // Return true if confirm is true, otherwise return false
      },
      onDismissed: (direction) {
        if (direction == DismissDirection.endToStart) {
          // Handle delete action
          // You might want to show a confirmation dialog before deleting
          // Delete the transaction using Firebase or your data source
        } else if (direction == DismissDirection.startToEnd) {
          // Handle edit action
          // Open an edit screen or show an edit dialog
        }
      },
      child: Container(
        margin: const EdgeInsets.symmetric(vertical: 10),
        padding: const EdgeInsets.all(10),
        decoration: BoxDecoration(
          color: Colors.white,
          borderRadius: BorderRadius.circular(15),
          boxShadow: const [
            BoxShadow(
              color: Color(0xFFD4CEFE),
              offset: Offset(0, 7),
              blurRadius: 15,
            )
          ],
        ),
        child: Row(
          children: [
            Container(
              width: 50,
              height: 50,
              decoration: BoxDecoration(
                color: data['type'] == 'Expense'
                    ? Color(0xffFFE5F3)
                    : Color.fromARGB(255, 229, 255, 250),
                borderRadius: BorderRadius.all(Radius.circular(10)),
              ),
              child: Center(
                child: FaIcon(
                  AppIcons().getExpenseCategoryIcons("${data['category']}"),
                ),
              ),
            ),
            const SizedBox(
              width: 15,
            ),
            Expanded(
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  Row(
                    mainAxisAlignment: MainAxisAlignment.spaceBetween,
                    children: [
                      Text(
                        "${data['title']}",
                        maxLines: 1,
                        style: TextStyle(
                          color: Color(0xff5C5C5C),
                          fontSize: 16,
                          fontWeight: FontWeight.w700,
                        ),
                      ),
                      Text(
                        "${data['type'] == 'Expense' ? '-' : '+'} ${data['amount']}",
                        maxLines: 1,
                        style: TextStyle(
                          color: data['type'] == 'Expense'
                              ? Colors.red
                              : Color(0xff02C487),
                          fontSize: 18,
                          fontWeight: FontWeight.w700,
                        ),
                      ),
                    ],
                  ),
                  Row(
                    mainAxisAlignment: MainAxisAlignment.spaceBetween,
                    children: [
                      Text(
                        "Balance",
                        maxLines: 1,
                        style: TextStyle(
                          color: Color(0xff5C5C5C),
                          fontSize: 14,
                        ),
                      ),
                      Text(
                        "${data['remainingAmount']}",
                        maxLines: 1,
                        style: TextStyle(
                          color: Color(0xff5C5C5C),
                          fontSize: 14,
                        ),
                      ),
                    ],
                  ),
                  Text(
                    "$formattedDate",
                    maxLines: 1,
                    style: TextStyle(
                      color: Color(0xff5C5C5C),
                      fontSize: 14,
                    ),
                  ),
                ],
              ),
            ),
            const SizedBox(
              width: 15,
            ),
          ],
        ),
      ),
    );
  }
}
